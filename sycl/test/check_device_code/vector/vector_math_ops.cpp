// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --version 4
// NOTE: ..., followed by some manual cleanup.

// RUN: %clangxx -I %sycl_include -fpreview-breaking-changes -fno-discard-value-names -S -emit-llvm -fno-sycl-instrument-device-code -Xclang -disable-lifetime-markers -fsycl-device-only %s -o - | FileCheck %s

// Windows/linux have some slight differences in IR generation (function
// arguments passing and long/long long differences/mangling) that could
// complicate test updates while not improving test coverage. Limiting to linux
// should be fine.
// REQUIRES: linux

// This test checks
// (1) the storage type of sycl::vec on device for all data types, and
// (2) the device code for various math operations on sycl::vec.
#include <sycl/sycl.hpp>

using namespace sycl;

/*************** Binary Arithmetic Ops ******************/

// CHECK-LABEL: define dso_local spir_func void @_Z7TestAddN4sycl3_V13vecIiLi2EEES2_(
// CHECK-SAME: ptr addrspace(4) dead_on_unwind noalias nocapture writable writeonly sret(%"class.sycl::_V1::vec") align 8 [[AGG_RESULT:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec") align 8 [[A:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec") align 8 [[B:%.*]]) local_unnamed_addr #[[ATTR0:[0-9]+]] !srcloc [[META6:![0-9]+]] !sycl_fixed_targets [[META7:![0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.experimental.noalias.scope.decl(metadata [[META8:![0-9]+]])
// CHECK-NEXT:    tail call void @llvm.experimental.noalias.scope.decl(metadata [[META11:![0-9]+]])
// CHECK-NEXT:    [[TMP0:%.*]] = load <2 x i32>, ptr [[A]], align 8, !noalias [[META14:![0-9]+]]
// CHECK-NEXT:    [[TMP1:%.*]] = load <2 x i32>, ptr [[B]], align 8, !noalias [[META14]]
// CHECK-NEXT:    [[ADD_I_I_I:%.*]] = add <2 x i32> [[TMP0]], [[TMP1]]
// CHECK-NEXT:    store <2 x i32> [[ADD_I_I_I]], ptr addrspace(4) [[AGG_RESULT]], align 8, !tbaa [[TBAA15:![0-9]+]], !alias.scope [[META14]]
// CHECK-NEXT:    ret void
//
SYCL_EXTERNAL auto TestAdd(vec<int, 2> a, vec<int, 2> b) { return a + b; }

// CHECK-LABEL: define dso_local spir_func void @_Z7TestAddN4sycl3_V13vecIfLi3EEES2_(
// CHECK-SAME: ptr addrspace(4) dead_on_unwind noalias nocapture writable writeonly sret(%"class.sycl::_V1::vec.79") align 16 [[AGG_RESULT:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.79") align 16 [[A:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.79") align 16 [[B:%.*]]) local_unnamed_addr #[[ATTR0]] !srcloc [[META18:![0-9]+]] !sycl_fixed_targets [[META7]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.experimental.noalias.scope.decl(metadata [[META19:![0-9]+]])
// CHECK-NEXT:    tail call void @llvm.experimental.noalias.scope.decl(metadata [[META22:![0-9]+]])
// CHECK-NEXT:    [[REF_TMP2_SROA_0_0_COPYLOAD_I_I:%.*]] = load <4 x float>, ptr [[A]], align 16, !noalias [[META25:![0-9]+]]
// CHECK-NEXT:    [[REF_TMP4_SROA_0_0_COPYLOAD_I_I:%.*]] = load <4 x float>, ptr [[B]], align 16, !noalias [[META25]]
// CHECK-NEXT:    [[TMP0:%.*]] = fadd <4 x float> [[REF_TMP2_SROA_0_0_COPYLOAD_I_I]], [[REF_TMP4_SROA_0_0_COPYLOAD_I_I]]
// CHECK-NEXT:    [[EXTRACTVEC_I_I_I:%.*]] = shufflevector <4 x float> [[TMP0]], <4 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 poison>
// CHECK-NEXT:    store <4 x float> [[EXTRACTVEC_I_I_I]], ptr addrspace(4) [[AGG_RESULT]], align 16, !tbaa [[TBAA15]], !alias.scope [[META25]]
// CHECK-NEXT:    ret void
//
SYCL_EXTERNAL auto TestAdd(vec<float, 3> a, vec<float, 3> b) { return a + b; }

// CHECK-LABEL: define dso_local spir_func void @_Z7TestAddN4sycl3_V13vecIcLi16EEES2_(
// CHECK-SAME: ptr addrspace(4) dead_on_unwind noalias nocapture writable writeonly sret(%"class.sycl::_V1::vec.172") align 16 [[AGG_RESULT:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.172") align 16 [[A:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.172") align 16 [[B:%.*]]) local_unnamed_addr #[[ATTR0]] !srcloc [[META26:![0-9]+]] !sycl_fixed_targets [[META7]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.experimental.noalias.scope.decl(metadata [[META27:![0-9]+]])
// CHECK-NEXT:    tail call void @llvm.experimental.noalias.scope.decl(metadata [[META30:![0-9]+]])
// CHECK-NEXT:    [[REF_TMP2_SROA_0_0_COPYLOAD_I_I:%.*]] = load <16 x i8>, ptr [[A]], align 16, !noalias [[META33:![0-9]+]]
// CHECK-NEXT:    [[REF_TMP4_SROA_0_0_COPYLOAD_I_I:%.*]] = load <16 x i8>, ptr [[B]], align 16, !noalias [[META33]]
// CHECK-NEXT:    [[ADD_I_I_I:%.*]] = add <16 x i8> [[REF_TMP2_SROA_0_0_COPYLOAD_I_I]], [[REF_TMP4_SROA_0_0_COPYLOAD_I_I]]
// CHECK-NEXT:    store <16 x i8> [[ADD_I_I_I]], ptr addrspace(4) [[AGG_RESULT]], align 16, !tbaa [[TBAA15]], !alias.scope [[META33]]
// CHECK-NEXT:    ret void
//
SYCL_EXTERNAL auto TestAdd(vec<char, 16> a, vec<char, 16> b) { return a + b; }

// std::byte does not support '+'. Therefore, using bitwise XOR as a substitute.
// CHECK-LABEL: define dso_local spir_func void @_Z7TestXorN4sycl3_V13vecISt4byteLi8EEES3_(
// CHECK-SAME: ptr addrspace(4) dead_on_unwind noalias nocapture writable writeonly sret(%"class.sycl::_V1::vec.265") align 8 [[AGG_RESULT:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.265") align 8 [[A:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.265") align 8 [[B:%.*]]) local_unnamed_addr #[[ATTR0]] !srcloc [[META34:![0-9]+]] !sycl_fixed_targets [[META7]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.experimental.noalias.scope.decl(metadata [[META35:![0-9]+]])
// CHECK-NEXT:    tail call void @llvm.experimental.noalias.scope.decl(metadata [[META38:![0-9]+]])
// CHECK-NEXT:    [[TMP0:%.*]] = load <8 x i8>, ptr [[A]], align 8, !noalias [[META41:![0-9]+]]
// CHECK-NEXT:    [[TMP1:%.*]] = load <8 x i8>, ptr [[B]], align 8, !noalias [[META41]]
// CHECK-NEXT:    [[XOR_I_I_I:%.*]] = xor <8 x i8> [[TMP0]], [[TMP1]]
// CHECK-NEXT:    store <8 x i8> [[XOR_I_I_I]], ptr addrspace(4) [[AGG_RESULT]], align 8, !tbaa [[TBAA15]], !alias.scope [[META41]]
// CHECK-NEXT:    ret void
//
SYCL_EXTERNAL auto TestXor(vec<std::byte, 8> a, vec<std::byte, 8> b) {
  return a ^ b;
}

// CHECK-LABEL: define dso_local spir_func void @_Z7TestAddN4sycl3_V13vecIbLi4EEES2_(
// CHECK-SAME: ptr addrspace(4) dead_on_unwind noalias nocapture writable writeonly sret(%"class.sycl::_V1::vec.359") align 4 [[AGG_RESULT:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.359") align 4 [[A:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.359") align 4 [[B:%.*]]) local_unnamed_addr #[[ATTR1:[0-9]+]] !srcloc [[META42:![0-9]+]] !sycl_fixed_targets [[META7]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP_I_I:%.*]] = alloca %"class.sycl::_V1::vec.359", align 4
// CHECK-NEXT:    tail call void @llvm.experimental.noalias.scope.decl(metadata [[META43:![0-9]+]])
// CHECK-NEXT:    tail call void @llvm.experimental.noalias.scope.decl(metadata [[META46:![0-9]+]])
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 4, ptr nonnull [[TMP_I_I]]), !noalias [[META43]]
// CHECK-NEXT:    store i32 0, ptr [[TMP_I_I]], align 4, !noalias [[META49:![0-9]+]]
// CHECK-NEXT:    br label [[FOR_COND_I_I:%.*]]
// CHECK:       for.cond.i.i:
// CHECK-NEXT:    [[I_0_I_I:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[INC_I_I:%.*]], [[FOR_BODY_I_I:%.*]] ]
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp ult i32 [[I_0_I_I]], 4
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[FOR_BODY_I_I]], label [[_ZN4SYCL3_V16DETAILPLERKNS0_3VECIBLI4EEES5__EXIT:%.*]]
// CHECK:       for.body.i.i:
// CHECK-NEXT:    [[CONV_I_I_I_I:%.*]] = zext nneg i32 [[I_0_I_I]] to i64
// CHECK-NEXT:    [[ARRAYIDX_I_I_I_I_I_I:%.*]] = getelementptr inbounds [4 x i8], ptr [[A]], i64 0, i64 [[CONV_I_I_I_I]]
// CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr [[ARRAYIDX_I_I_I_I_I_I]], align 1, !tbaa [[TBAA50:![0-9]+]], !range [[RNG52:![0-9]+]], !noalias [[META49]], !noundef [[META7]]
// CHECK-NEXT:    [[ARRAYIDX_I_I_I_I13_I_I:%.*]] = getelementptr inbounds [4 x i8], ptr [[B]], i64 0, i64 [[CONV_I_I_I_I]]
// CHECK-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX_I_I_I_I13_I_I]], align 1, !tbaa [[TBAA50]], !range [[RNG52]], !noalias [[META49]], !noundef [[META7]]
// CHECK-NEXT:    [[TMP2:%.*]] = or i8 [[TMP0]], [[TMP1]]
// CHECK-NEXT:    [[ARRAYIDX_I_I_I_I_I:%.*]] = getelementptr inbounds [4 x i8], ptr [[TMP_I_I]], i64 0, i64 [[CONV_I_I_I_I]]
// CHECK-NEXT:    store i8 [[TMP2]], ptr [[ARRAYIDX_I_I_I_I_I]], align 1, !tbaa [[TBAA50]], !noalias [[META49]]
// CHECK-NEXT:    [[INC_I_I]] = add nuw nsw i32 [[I_0_I_I]], 1
// CHECK-NEXT:    br label [[FOR_COND_I_I]], !llvm.loop [[LOOP53:![0-9]+]]
// CHECK:       _ZN4sycl3_V16detailplERKNS0_3vecIbLi4EEES5_.exit:
// CHECK-NEXT:    [[TMP3:%.*]] = load i32, ptr [[TMP_I_I]], align 4, !noalias [[META49]]
// CHECK-NEXT:    store i32 [[TMP3]], ptr addrspace(4) [[AGG_RESULT]], align 4, !alias.scope [[META49]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 4, ptr nonnull [[TMP_I_I]]), !noalias [[META43]]
// CHECK-NEXT:    ret void
//
SYCL_EXTERNAL auto TestAdd(vec<bool, 4> a, vec<bool, 4> b) { return a + b; }

// CHECK-LABEL: define dso_local spir_func void @_Z7TestAddN4sycl3_V13vecINS0_6detail9half_impl4halfELi3EEES5_(
// CHECK-SAME: ptr addrspace(4) dead_on_unwind noalias nocapture writable writeonly sret(%"class.sycl::_V1::vec.451") align 8 [[AGG_RESULT:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.451") align 8 [[A:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.451") align 8 [[B:%.*]]) local_unnamed_addr #[[ATTR0]] !srcloc [[META55:![0-9]+]] !sycl_used_aspects [[META56:![0-9]+]] !sycl_fixed_targets [[META7]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    tail call void @llvm.experimental.noalias.scope.decl(metadata [[META58:![0-9]+]])
// CHECK-NEXT:    tail call void @llvm.experimental.noalias.scope.decl(metadata [[META61:![0-9]+]])
// CHECK-NEXT:    [[TMP0:%.*]] = load <4 x half>, ptr [[A]], align 8, !noalias [[META64:![0-9]+]]
// CHECK-NEXT:    [[TMP1:%.*]] = load <4 x half>, ptr [[B]], align 8, !noalias [[META64]]
// CHECK-NEXT:    [[TMP2:%.*]] = fadd <4 x half> [[TMP0]], [[TMP1]]
// CHECK-NEXT:    [[EXTRACTVEC_I_I_I:%.*]] = shufflevector <4 x half> [[TMP2]], <4 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 poison>
// CHECK-NEXT:    store <4 x half> [[EXTRACTVEC_I_I_I]], ptr addrspace(4) [[AGG_RESULT]], align 8, !tbaa [[TBAA15]], !alias.scope [[META64]]
// CHECK-NEXT:    ret void
//
SYCL_EXTERNAL auto TestAdd(vec<half, 3> a, vec<half, 3> b) { return a + b; }

// CHECK-LABEL: define dso_local spir_func void @_Z7TestAddN4sycl3_V13vecINS0_3ext6oneapi8bfloat16ELi3EEES5_(
// CHECK-SAME: ptr addrspace(4) dead_on_unwind noalias nocapture writable writeonly sret(%"class.sycl::_V1::vec.544") align 8 [[AGG_RESULT:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.544") align 8 [[A:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.544") align 8 [[B:%.*]]) local_unnamed_addr #[[ATTR2:[0-9]+]] !srcloc [[META65:![0-9]+]] !sycl_fixed_targets [[META7]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[REF_TMP_I_I_I_I:%.*]] = alloca float, align 4
// CHECK-NEXT:    [[TMP_I_I:%.*]] = alloca %"class.sycl::_V1::vec.544", align 8
// CHECK-NEXT:    [[REF_TMP2_I_I:%.*]] = alloca %"class.sycl::_V1::ext::oneapi::bfloat16", align 2
// CHECK-NEXT:    [[REF_TMP3_I_I:%.*]] = alloca %"class.sycl::_V1::ext::oneapi::bfloat16", align 2
// CHECK-NEXT:    tail call void @llvm.experimental.noalias.scope.decl(metadata [[META66:![0-9]+]])
// CHECK-NEXT:    tail call void @llvm.experimental.noalias.scope.decl(metadata [[META69:![0-9]+]])
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr nonnull [[TMP_I_I]]), !noalias [[META66]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 2, ptr nonnull [[REF_TMP2_I_I]]), !noalias [[META66]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 2, ptr nonnull [[REF_TMP3_I_I]]), !noalias [[META66]]
// CHECK-NEXT:    [[REF_TMP2_ASCAST_I_I:%.*]] = addrspacecast ptr [[REF_TMP2_I_I]] to ptr addrspace(4)
// CHECK-NEXT:    [[REF_TMP3_ASCAST_I_I:%.*]] = addrspacecast ptr [[REF_TMP3_I_I]] to ptr addrspace(4)
// CHECK-NEXT:    store i64 0, ptr [[TMP_I_I]], align 8, !noalias [[META72:![0-9]+]]
// CHECK-NEXT:    [[REF_TMP_ASCAST_I_I_I_I:%.*]] = addrspacecast ptr [[REF_TMP_I_I_I_I]] to ptr addrspace(4)
// CHECK-NEXT:    br label [[FOR_COND_I_I:%.*]]
// CHECK:       for.cond.i.i:
// CHECK-NEXT:    [[I_0_I_I:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[INC_I_I:%.*]], [[FOR_BODY_I_I:%.*]] ]
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp ult i32 [[I_0_I_I]], 3
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[FOR_BODY_I_I]], label [[_ZN4SYCL3_V16DETAILPLERKNS0_3VECINS0_3EXT6ONEAPI8BFLOAT16ELI3EEES8__EXIT:%.*]]
// CHECK:       for.body.i.i:
// CHECK-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata [[META73:![0-9]+]])
// CHECK-NEXT:    [[CONV_I_I_I_I:%.*]] = zext nneg i32 [[I_0_I_I]] to i64
// CHECK-NEXT:    [[ARRAYIDX_I_I_I_I_I_I:%.*]] = getelementptr inbounds [4 x %"class.sycl::_V1::ext::oneapi::bfloat16"], ptr [[A]], i64 0, i64 [[CONV_I_I_I_I]]
// CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[ARRAYIDX_I_I_I_I_I_I]], align 2, !tbaa [[TBAA76:![0-9]+]], !noalias [[META78:![0-9]+]]
// CHECK-NEXT:    store i16 [[TMP0]], ptr [[REF_TMP2_I_I]], align 2, !tbaa [[TBAA76]], !alias.scope [[META73]], !noalias [[META72]]
// CHECK-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata [[META79:![0-9]+]])
// CHECK-NEXT:    [[ARRAYIDX_I_I_I_I9_I_I:%.*]] = getelementptr inbounds [4 x %"class.sycl::_V1::ext::oneapi::bfloat16"], ptr [[B]], i64 0, i64 [[CONV_I_I_I_I]]
// CHECK-NEXT:    [[TMP1:%.*]] = load i16, ptr [[ARRAYIDX_I_I_I_I9_I_I]], align 2, !tbaa [[TBAA76]], !noalias [[META82:![0-9]+]]
// CHECK-NEXT:    store i16 [[TMP1]], ptr [[REF_TMP3_I_I]], align 2, !tbaa [[TBAA76]], !alias.scope [[META79]], !noalias [[META72]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 4, ptr nonnull [[REF_TMP_I_I_I_I]]), !noalias [[META83:![0-9]+]]
// CHECK-NEXT:    [[CALL_I_I_I_I_I_I:%.*]] = call spir_func noundef float @__devicelib_ConvertBF16ToFINTEL(ptr addrspace(4) noundef align 2 dereferenceable(2) [[REF_TMP2_ASCAST_I_I]]) #[[ATTR10:[0-9]+]], !noalias [[META86:![0-9]+]]
// CHECK-NEXT:    [[CALL_I_I2_I_I_I_I:%.*]] = call spir_func noundef float @__devicelib_ConvertBF16ToFINTEL(ptr addrspace(4) noundef align 2 dereferenceable(2) [[REF_TMP3_ASCAST_I_I]]) #[[ATTR10]], !noalias [[META86]]
// CHECK-NEXT:    [[ADD_I_I_I_I:%.*]] = fadd float [[CALL_I_I_I_I_I_I]], [[CALL_I_I2_I_I_I_I]]
// CHECK-NEXT:    store float [[ADD_I_I_I_I]], ptr [[REF_TMP_I_I_I_I]], align 4, !tbaa [[TBAA89:![0-9]+]], !noalias [[META86]]
// CHECK-NEXT:    [[CALL_I_I3_I_I_I_I:%.*]] = call spir_func noundef zeroext i16 @__devicelib_ConvertFToBF16INTEL(ptr addrspace(4) noundef align 4 dereferenceable(4) [[REF_TMP_ASCAST_I_I_I_I]]) #[[ATTR10]], !noalias [[META86]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 4, ptr nonnull [[REF_TMP_I_I_I_I]]), !noalias [[META83]]
// CHECK-NEXT:    [[ARRAYIDX_I_I_I_I_I:%.*]] = getelementptr inbounds [4 x %"class.sycl::_V1::ext::oneapi::bfloat16"], ptr [[TMP_I_I]], i64 0, i64 [[CONV_I_I_I_I]]
// CHECK-NEXT:    store i16 [[CALL_I_I3_I_I_I_I]], ptr [[ARRAYIDX_I_I_I_I_I]], align 2, !tbaa [[TBAA76]], !noalias [[META72]]
// CHECK-NEXT:    [[INC_I_I]] = add nuw nsw i32 [[I_0_I_I]], 1
// CHECK-NEXT:    br label [[FOR_COND_I_I]], !llvm.loop [[LOOP91:![0-9]+]]
// CHECK:       _ZN4sycl3_V16detailplERKNS0_3vecINS0_3ext6oneapi8bfloat16ELi3EEES8_.exit:
// CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[TMP_I_I]], align 8, !noalias [[META72]]
// CHECK-NEXT:    store i64 [[TMP2]], ptr addrspace(4) [[AGG_RESULT]], align 8, !alias.scope [[META72]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr nonnull [[TMP_I_I]]), !noalias [[META66]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 2, ptr nonnull [[REF_TMP2_I_I]]), !noalias [[META66]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 2, ptr nonnull [[REF_TMP3_I_I]]), !noalias [[META66]]
// CHECK-NEXT:    ret void
//
SYCL_EXTERNAL auto TestAdd(vec<ext::oneapi::bfloat16, 3> a,
                           vec<ext::oneapi::bfloat16, 3> b) {
  return a + b;
}

/***************** Binary Logical Ops *******************/

// CHECK-LABEL: define dso_local spir_func void @_Z15TestGreaterThanN4sycl3_V13vecIiLi16EEES2_(
// CHECK-SAME: ptr addrspace(4) dead_on_unwind noalias nocapture writable writeonly sret(%"class.sycl::_V1::vec.637") align 64 [[AGG_RESULT:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.637") align 64 [[A:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.637") align 64 [[B:%.*]]) local_unnamed_addr #[[ATTR4:[0-9]+]] !srcloc [[META92:![0-9]+]] !sycl_fixed_targets [[META7]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP_I_I:%.*]] = alloca %"class.sycl::_V1::vec.637", align 64
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 64, ptr nonnull [[TMP_I_I]]), !noalias [[META93:![0-9]+]]
// CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr align 64 [[TMP_I_I]], i8 0, i64 64, i1 false), !noalias [[META96:![0-9]+]]
// CHECK-NEXT:    br label [[FOR_COND_I_I:%.*]]
// CHECK:       for.cond.i.i:
// CHECK-NEXT:    [[I_0_I_I:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[INC_I_I:%.*]], [[FOR_BODY_I_I:%.*]] ]
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp ult i32 [[I_0_I_I]], 16
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[FOR_BODY_I_I]], label [[_ZN4SYCL3_V16DETAILGTERKNS0_3VECIILI16EEES5__EXIT:%.*]]
// CHECK:       for.body.i.i:
// CHECK-NEXT:    [[CONV_I_I_I_I:%.*]] = zext nneg i32 [[I_0_I_I]] to i64
// CHECK-NEXT:    [[ARRAYIDX_I_I_I_I_I_I:%.*]] = getelementptr inbounds [16 x i32], ptr [[A]], i64 0, i64 [[CONV_I_I_I_I]]
// CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[ARRAYIDX_I_I_I_I_I_I]], align 4, !tbaa [[TBAA99:![0-9]+]], !noalias [[META96]]
// CHECK-NEXT:    [[ARRAYIDX_I_I_I_I11_I_I:%.*]] = getelementptr inbounds [16 x i32], ptr [[B]], i64 0, i64 [[CONV_I_I_I_I]]
// CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[ARRAYIDX_I_I_I_I11_I_I]], align 4, !tbaa [[TBAA99]], !noalias [[META96]]
// CHECK-NEXT:    [[CMP_I_I_I_I:%.*]] = icmp sgt i32 [[TMP0]], [[TMP1]]
// CHECK-NEXT:    [[COND_I_I:%.*]] = sext i1 [[CMP_I_I_I_I]] to i32
// CHECK-NEXT:    [[ARRAYIDX_I_I_I_I_I:%.*]] = getelementptr inbounds [16 x i32], ptr [[TMP_I_I]], i64 0, i64 [[CONV_I_I_I_I]]
// CHECK-NEXT:    store i32 [[COND_I_I]], ptr [[ARRAYIDX_I_I_I_I_I]], align 4, !tbaa [[TBAA99]], !noalias [[META96]]
// CHECK-NEXT:    [[INC_I_I]] = add nuw nsw i32 [[I_0_I_I]], 1
// CHECK-NEXT:    br label [[FOR_COND_I_I]], !llvm.loop [[LOOP101:![0-9]+]]
// CHECK:       _ZN4sycl3_V16detailgtERKNS0_3vecIiLi16EEES5_.exit:
// CHECK-NEXT:    call void @llvm.memcpy.p4.p0.i64(ptr addrspace(4) align 64 [[AGG_RESULT]], ptr align 64 [[TMP_I_I]], i64 64, i1 false)
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 64, ptr nonnull [[TMP_I_I]]), !noalias [[META93]]
// CHECK-NEXT:    ret void
//
SYCL_EXTERNAL auto TestGreaterThan(vec<int, 16> a, vec<int, 16> b) {
  return a > b;
}

// CHECK-LABEL: define dso_local spir_func noundef <3 x i8> @_Z15TestGreaterThanN4sycl3_V13vecISt4byteLi3EEES3_(
// CHECK-SAME: ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.731") align 4 [[A:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.731") align 4 [[B:%.*]]) local_unnamed_addr #[[ATTR5:[0-9]+]] !srcloc [[META102:![0-9]+]] !sycl_fixed_targets [[META7]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[LOADVEC4_I_I:%.*]] = load <4 x i8>, ptr [[A]], align 1
// CHECK-NEXT:    [[LOADVEC4_I_I2:%.*]] = load <4 x i8>, ptr [[B]], align 1
// CHECK-NEXT:    [[TMP0:%.*]] = icmp ugt <4 x i8> [[LOADVEC4_I_I]], [[LOADVEC4_I_I2]]
// CHECK-NEXT:    [[CMP:%.*]] = shufflevector <4 x i1> [[TMP0]], <4 x i1> poison, <3 x i32> <i32 0, i32 1, i32 2>
// CHECK-NEXT:    [[SEXT:%.*]] = sext <3 x i1> [[CMP]] to <3 x i8>
// CHECK-NEXT:    ret <3 x i8> [[SEXT]]
//
SYCL_EXTERNAL auto TestGreaterThan(vec<std::byte, 3> a, vec<std::byte, 3> b) {
  return a > b;
}

// CHECK-LABEL: define dso_local spir_func void @_Z15TestGreaterThanN4sycl3_V13vecIbLi2EEES2_(
// CHECK-SAME: ptr addrspace(4) dead_on_unwind noalias nocapture writable writeonly sret(%"class.sycl::_V1::vec.823") align 2 [[AGG_RESULT:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.914") align 2 [[A:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.914") align 2 [[B:%.*]]) local_unnamed_addr #[[ATTR1]] !srcloc [[META103:![0-9]+]] !sycl_fixed_targets [[META7]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP_I_I:%.*]] = alloca %"class.sycl::_V1::vec.823", align 2
// CHECK-NEXT:    tail call void @llvm.experimental.noalias.scope.decl(metadata [[META104:![0-9]+]])
// CHECK-NEXT:    tail call void @llvm.experimental.noalias.scope.decl(metadata [[META107:![0-9]+]])
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 2, ptr nonnull [[TMP_I_I]]), !noalias [[META104]]
// CHECK-NEXT:    store i16 0, ptr [[TMP_I_I]], align 2, !noalias [[META110:![0-9]+]]
// CHECK-NEXT:    br label [[FOR_COND_I_I:%.*]]
// CHECK:       for.cond.i.i:
// CHECK-NEXT:    [[I_0_I_I:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[INC_I_I:%.*]], [[FOR_BODY_I_I:%.*]] ]
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp ult i32 [[I_0_I_I]], 2
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[FOR_BODY_I_I]], label [[_ZN4SYCL3_V16DETAILGTERKNS0_3VECIBLI2EEES5__EXIT:%.*]]
// CHECK:       for.body.i.i:
// CHECK-NEXT:    [[CONV_I_I_I_I:%.*]] = zext nneg i32 [[I_0_I_I]] to i64
// CHECK-NEXT:    [[ARRAYIDX_I_I_I_I_I_I:%.*]] = getelementptr inbounds [2 x i8], ptr [[A]], i64 0, i64 [[CONV_I_I_I_I]]
// CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr [[ARRAYIDX_I_I_I_I_I_I]], align 1, !tbaa [[TBAA50]], !range [[RNG52]], !noalias [[META110]], !noundef [[META7]]
// CHECK-NEXT:    [[ARRAYIDX_I_I_I_I12_I_I:%.*]] = getelementptr inbounds [2 x i8], ptr [[B]], i64 0, i64 [[CONV_I_I_I_I]]
// CHECK-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX_I_I_I_I12_I_I]], align 1, !tbaa [[TBAA50]], !range [[RNG52]], !noalias [[META110]], !noundef [[META7]]
// CHECK-NEXT:    [[CMP_I_I_I_I:%.*]] = icmp ugt i8 [[TMP0]], [[TMP1]]
// CHECK-NEXT:    [[CONV_I_I:%.*]] = sext i1 [[CMP_I_I_I_I]] to i8
// CHECK-NEXT:    [[ARRAYIDX_I_I_I_I_I:%.*]] = getelementptr inbounds [2 x i8], ptr [[TMP_I_I]], i64 0, i64 [[CONV_I_I_I_I]]
// CHECK-NEXT:    store i8 [[CONV_I_I]], ptr [[ARRAYIDX_I_I_I_I_I]], align 1, !tbaa [[TBAA15]], !noalias [[META110]]
// CHECK-NEXT:    [[INC_I_I]] = add nuw nsw i32 [[I_0_I_I]], 1
// CHECK-NEXT:    br label [[FOR_COND_I_I]], !llvm.loop [[LOOP111:![0-9]+]]
// CHECK:       _ZN4sycl3_V16detailgtERKNS0_3vecIbLi2EEES5_.exit:
// CHECK-NEXT:    [[TMP2:%.*]] = load i16, ptr [[TMP_I_I]], align 2, !noalias [[META110]]
// CHECK-NEXT:    store i16 [[TMP2]], ptr addrspace(4) [[AGG_RESULT]], align 2, !alias.scope [[META110]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 2, ptr nonnull [[TMP_I_I]]), !noalias [[META104]]
// CHECK-NEXT:    ret void
//
SYCL_EXTERNAL auto TestGreaterThan(vec<bool, 2> a, vec<bool, 2> b) {
  return a > b;
}

// CHECK-LABEL: define dso_local spir_func void @_Z15TestGreaterThanN4sycl3_V13vecINS0_6detail9half_impl4halfELi8EEES5_(
// CHECK-SAME: ptr addrspace(4) dead_on_unwind noalias nocapture writable writeonly sret(%"class.sycl::_V1::vec.1009") align 16 [[AGG_RESULT:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.1100") align 16 [[A:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.1100") align 16 [[B:%.*]]) local_unnamed_addr #[[ATTR4]] !srcloc [[META112:![0-9]+]] !sycl_used_aspects [[META56]] !sycl_fixed_targets [[META7]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP_I_I:%.*]] = alloca %"class.sycl::_V1::vec.1009", align 16
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr nonnull [[TMP_I_I]]), !noalias [[META113:![0-9]+]]
// CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr align 16 [[TMP_I_I]], i8 0, i64 16, i1 false), !noalias [[META116:![0-9]+]]
// CHECK-NEXT:    br label [[FOR_COND_I_I:%.*]]
// CHECK:       for.cond.i.i:
// CHECK-NEXT:    [[I_0_I_I:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[INC_I_I:%.*]], [[FOR_BODY_I_I:%.*]] ]
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp ult i32 [[I_0_I_I]], 8
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[FOR_BODY_I_I]], label [[_ZN4SYCL3_V16DETAILGTERKNS0_3VECINS1_9HALF_IMPL4HALFELI8EEES7__EXIT:%.*]]
// CHECK:       for.body.i.i:
// CHECK-NEXT:    [[CONV_I_I_I_I:%.*]] = zext nneg i32 [[I_0_I_I]] to i64
// CHECK-NEXT:    [[ARRAYIDX_I_I_I_I_I_I:%.*]] = getelementptr inbounds [8 x %"class.sycl::_V1::detail::half_impl::half"], ptr [[A]], i64 0, i64 [[CONV_I_I_I_I]]
// CHECK-NEXT:    [[TMP0:%.*]] = load half, ptr [[ARRAYIDX_I_I_I_I_I_I]], align 2, !tbaa [[TBAA119:![0-9]+]], !noalias [[META121:![0-9]+]]
// CHECK-NEXT:    [[ARRAYIDX_I_I_I_I9_I_I:%.*]] = getelementptr inbounds [8 x %"class.sycl::_V1::detail::half_impl::half"], ptr [[B]], i64 0, i64 [[CONV_I_I_I_I]]
// CHECK-NEXT:    [[TMP1:%.*]] = load half, ptr [[ARRAYIDX_I_I_I_I9_I_I]], align 2, !tbaa [[TBAA119]], !noalias [[META124:![0-9]+]]
// CHECK-NEXT:    [[CMP_I_I_I_I_I:%.*]] = fcmp ogt half [[TMP0]], [[TMP1]]
// CHECK-NEXT:    [[CONV_I_I:%.*]] = sext i1 [[CMP_I_I_I_I_I]] to i16
// CHECK-NEXT:    [[ARRAYIDX_I_I_I_I_I:%.*]] = getelementptr inbounds [8 x i16], ptr [[TMP_I_I]], i64 0, i64 [[CONV_I_I_I_I]]
// CHECK-NEXT:    store i16 [[CONV_I_I]], ptr [[ARRAYIDX_I_I_I_I_I]], align 2, !tbaa [[TBAA76]], !noalias [[META116]]
// CHECK-NEXT:    [[INC_I_I]] = add nuw nsw i32 [[I_0_I_I]], 1
// CHECK-NEXT:    br label [[FOR_COND_I_I]], !llvm.loop [[LOOP127:![0-9]+]]
// CHECK:       _ZN4sycl3_V16detailgtERKNS0_3vecINS1_9half_impl4halfELi8EEES7_.exit:
// CHECK-NEXT:    call void @llvm.memcpy.p4.p0.i64(ptr addrspace(4) align 16 [[AGG_RESULT]], ptr align 16 [[TMP_I_I]], i64 16, i1 false)
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr nonnull [[TMP_I_I]]), !noalias [[META113]]
// CHECK-NEXT:    ret void
//
SYCL_EXTERNAL auto TestGreaterThan(vec<half, 8> a, vec<half, 8> b) {
  return a > b;
}

// CHECK-LABEL: define dso_local spir_func void @_Z15TestGreaterThanN4sycl3_V13vecINS0_3ext6oneapi8bfloat16ELi4EEES5_(
// CHECK-SAME: ptr addrspace(4) dead_on_unwind noalias nocapture writable writeonly sret(%"class.sycl::_V1::vec.1194") align 8 [[AGG_RESULT:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.1285") align 8 [[A:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.1285") align 8 [[B:%.*]]) local_unnamed_addr #[[ATTR2]] !srcloc [[META128:![0-9]+]] !sycl_fixed_targets [[META7]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP_I_I:%.*]] = alloca %"class.sycl::_V1::vec.1194", align 8
// CHECK-NEXT:    [[REF_TMP_I_I:%.*]] = alloca %"class.sycl::_V1::ext::oneapi::bfloat16", align 2
// CHECK-NEXT:    [[REF_TMP2_I_I:%.*]] = alloca %"class.sycl::_V1::ext::oneapi::bfloat16", align 2
// CHECK-NEXT:    tail call void @llvm.experimental.noalias.scope.decl(metadata [[META129:![0-9]+]])
// CHECK-NEXT:    tail call void @llvm.experimental.noalias.scope.decl(metadata [[META132:![0-9]+]])
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr nonnull [[TMP_I_I]]), !noalias [[META129]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 2, ptr nonnull [[REF_TMP_I_I]]), !noalias [[META129]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 2, ptr nonnull [[REF_TMP2_I_I]]), !noalias [[META129]]
// CHECK-NEXT:    [[REF_TMP_ASCAST_I_I:%.*]] = addrspacecast ptr [[REF_TMP_I_I]] to ptr addrspace(4)
// CHECK-NEXT:    [[REF_TMP2_ASCAST_I_I:%.*]] = addrspacecast ptr [[REF_TMP2_I_I]] to ptr addrspace(4)
// CHECK-NEXT:    store i64 0, ptr [[TMP_I_I]], align 8, !noalias [[META135:![0-9]+]]
// CHECK-NEXT:    br label [[FOR_COND_I_I:%.*]]
// CHECK:       for.cond.i.i:
// CHECK-NEXT:    [[I_0_I_I:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[INC_I_I:%.*]], [[FOR_BODY_I_I:%.*]] ]
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp ult i32 [[I_0_I_I]], 4
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[FOR_BODY_I_I]], label [[_ZN4SYCL3_V16DETAILGTERKNS0_3VECINS0_3EXT6ONEAPI8BFLOAT16ELI4EEES8__EXIT:%.*]]
// CHECK:       for.body.i.i:
// CHECK-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata [[META136:![0-9]+]])
// CHECK-NEXT:    [[CONV_I_I_I_I:%.*]] = zext nneg i32 [[I_0_I_I]] to i64
// CHECK-NEXT:    [[ARRAYIDX_I_I_I_I_I_I:%.*]] = getelementptr inbounds [4 x %"class.sycl::_V1::ext::oneapi::bfloat16"], ptr [[A]], i64 0, i64 [[CONV_I_I_I_I]]
// CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[ARRAYIDX_I_I_I_I_I_I]], align 2, !tbaa [[TBAA76]], !noalias [[META139:![0-9]+]]
// CHECK-NEXT:    store i16 [[TMP0]], ptr [[REF_TMP_I_I]], align 2, !tbaa [[TBAA76]], !alias.scope [[META136]], !noalias [[META135]]
// CHECK-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata [[META140:![0-9]+]])
// CHECK-NEXT:    [[ARRAYIDX_I_I_I_I9_I_I:%.*]] = getelementptr inbounds [4 x %"class.sycl::_V1::ext::oneapi::bfloat16"], ptr [[B]], i64 0, i64 [[CONV_I_I_I_I]]
// CHECK-NEXT:    [[TMP1:%.*]] = load i16, ptr [[ARRAYIDX_I_I_I_I9_I_I]], align 2, !tbaa [[TBAA76]], !noalias [[META143:![0-9]+]]
// CHECK-NEXT:    store i16 [[TMP1]], ptr [[REF_TMP2_I_I]], align 2, !tbaa [[TBAA76]], !alias.scope [[META140]], !noalias [[META135]]
// CHECK-NEXT:    [[CALL_I_I_I_I_I_I_I:%.*]] = call spir_func noundef float @__devicelib_ConvertBF16ToFINTEL(ptr addrspace(4) noundef align 2 dereferenceable(2) [[REF_TMP_ASCAST_I_I]]) #[[ATTR10]], !noalias [[META135]]
// CHECK-NEXT:    [[CALL_I_I2_I_I_I_I_I:%.*]] = call spir_func noundef float @__devicelib_ConvertBF16ToFINTEL(ptr addrspace(4) noundef align 2 dereferenceable(2) [[REF_TMP2_ASCAST_I_I]]) #[[ATTR10]], !noalias [[META135]]
// CHECK-NEXT:    [[CMP_I_I_I_I_I:%.*]] = fcmp ogt float [[CALL_I_I_I_I_I_I_I]], [[CALL_I_I2_I_I_I_I_I]]
// CHECK-NEXT:    [[CONV_I_I:%.*]] = sext i1 [[CMP_I_I_I_I_I]] to i16
// CHECK-NEXT:    [[ARRAYIDX_I_I_I_I_I:%.*]] = getelementptr inbounds [4 x i16], ptr [[TMP_I_I]], i64 0, i64 [[CONV_I_I_I_I]]
// CHECK-NEXT:    store i16 [[CONV_I_I]], ptr [[ARRAYIDX_I_I_I_I_I]], align 2, !tbaa [[TBAA76]], !noalias [[META135]]
// CHECK-NEXT:    [[INC_I_I]] = add nuw nsw i32 [[I_0_I_I]], 1
// CHECK-NEXT:    br label [[FOR_COND_I_I]], !llvm.loop [[LOOP144:![0-9]+]]
// CHECK:       _ZN4sycl3_V16detailgtERKNS0_3vecINS0_3ext6oneapi8bfloat16ELi4EEES8_.exit:
// CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[TMP_I_I]], align 8, !noalias [[META135]]
// CHECK-NEXT:    store i64 [[TMP2]], ptr addrspace(4) [[AGG_RESULT]], align 8, !alias.scope [[META135]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr nonnull [[TMP_I_I]]), !noalias [[META129]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 2, ptr nonnull [[REF_TMP_I_I]]), !noalias [[META129]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 2, ptr nonnull [[REF_TMP2_I_I]]), !noalias [[META129]]
// CHECK-NEXT:    ret void
//
SYCL_EXTERNAL auto TestGreaterThan(vec<ext::oneapi::bfloat16, 4> a,
                                   vec<ext::oneapi::bfloat16, 4> b) {
  return a > b;
}

/********************** Unary Ops **********************/

// CHECK-LABEL: define dso_local spir_func void @_Z12TestNegationN4sycl3_V13vecIiLi3EEE(
// CHECK-SAME: ptr addrspace(4) dead_on_unwind noalias nocapture writable writeonly sret(%"class.sycl::_V1::vec.1379") align 16 [[AGG_RESULT:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.1379") align 16 [[A:%.*]]) local_unnamed_addr #[[ATTR4]] !srcloc [[META145:![0-9]+]] !sycl_fixed_targets [[META7]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP_I_I:%.*]] = alloca %"class.sycl::_V1::vec.1379", align 16
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr nonnull [[TMP_I_I]]), !noalias [[META146:![0-9]+]]
// CHECK-NEXT:    br label [[FOR_COND_I_I:%.*]]
// CHECK:       for.cond.i.i:
// CHECK-NEXT:    [[I_0_I_I:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[INC_I_I:%.*]], [[FOR_BODY_I_I:%.*]] ]
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp ult i32 [[I_0_I_I]], 3
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[FOR_BODY_I_I]], label [[_ZN4SYCL3_V16DETAILNTERKNS0_3VECIILI3EEE_EXIT:%.*]]
// CHECK:       for.body.i.i:
// CHECK-NEXT:    [[CONV_I_I_I:%.*]] = zext nneg i32 [[I_0_I_I]] to i64
// CHECK-NEXT:    [[ARRAYIDX_I_I_I_I_I:%.*]] = getelementptr inbounds [4 x i32], ptr [[A]], i64 0, i64 [[CONV_I_I_I]]
// CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[ARRAYIDX_I_I_I_I_I]], align 4, !tbaa [[TBAA99]], !noalias [[META149:![0-9]+]]
// CHECK-NEXT:    [[TOBOOL_NOT_I_I_I:%.*]] = icmp eq i32 [[TMP0]], 0
// CHECK-NEXT:    [[COND_I_I:%.*]] = sext i1 [[TOBOOL_NOT_I_I_I]] to i32
// CHECK-NEXT:    [[ARRAYIDX_I_I_I9_I_I:%.*]] = getelementptr inbounds [4 x i32], ptr [[TMP_I_I]], i64 0, i64 [[CONV_I_I_I]]
// CHECK-NEXT:    store i32 [[COND_I_I]], ptr [[ARRAYIDX_I_I_I9_I_I]], align 4, !tbaa [[TBAA99]], !noalias [[META149]]
// CHECK-NEXT:    [[INC_I_I]] = add nuw nsw i32 [[I_0_I_I]], 1
// CHECK-NEXT:    br label [[FOR_COND_I_I]], !llvm.loop [[LOOP152:![0-9]+]]
// CHECK:       _ZN4sycl3_V16detailntERKNS0_3vecIiLi3EEE.exit:
// CHECK-NEXT:    call void @llvm.memcpy.p4.p0.i64(ptr addrspace(4) align 16 [[AGG_RESULT]], ptr align 16 [[TMP_I_I]], i64 16, i1 false)
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr nonnull [[TMP_I_I]]), !noalias [[META146]]
// CHECK-NEXT:    ret void
//
SYCL_EXTERNAL auto TestNegation(vec<int, 3> a) { return !a; }

// CHECK-LABEL: define dso_local spir_func void @_Z9TestMinusN4sycl3_V13vecIiLi4EEE(
// CHECK-SAME: ptr addrspace(4) dead_on_unwind noalias nocapture writable writeonly sret(%"class.sycl::_V1::vec.1470") align 16 [[AGG_RESULT:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.1470") align 16 [[A:%.*]]) local_unnamed_addr #[[ATTR4]] !srcloc [[META153:![0-9]+]] !sycl_fixed_targets [[META7]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP_I_I:%.*]] = alloca %"class.sycl::_V1::vec.1470", align 16
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr nonnull [[TMP_I_I]]), !noalias [[META154:![0-9]+]]
// CHECK-NEXT:    br label [[FOR_COND_I_I:%.*]]
// CHECK:       for.cond.i.i:
// CHECK-NEXT:    [[I_0_I_I:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[INC_I_I:%.*]], [[FOR_BODY_I_I:%.*]] ]
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp ult i32 [[I_0_I_I]], 4
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[FOR_BODY_I_I]], label [[_ZN4SYCL3_V16DETAILNGERKNS0_3VECIILI4EEE_EXIT:%.*]]
// CHECK:       for.body.i.i:
// CHECK-NEXT:    [[CONV_I_I_I:%.*]] = zext nneg i32 [[I_0_I_I]] to i64
// CHECK-NEXT:    [[ARRAYIDX_I_I_I_I_I:%.*]] = getelementptr inbounds [4 x i32], ptr [[A]], i64 0, i64 [[CONV_I_I_I]]
// CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[ARRAYIDX_I_I_I_I_I]], align 4, !tbaa [[TBAA99]], !noalias [[META157:![0-9]+]]
// CHECK-NEXT:    [[SUB_I_I_I:%.*]] = sub nsw i32 0, [[TMP0]]
// CHECK-NEXT:    [[ARRAYIDX_I_I_I9_I_I:%.*]] = getelementptr inbounds [4 x i32], ptr [[TMP_I_I]], i64 0, i64 [[CONV_I_I_I]]
// CHECK-NEXT:    store i32 [[SUB_I_I_I]], ptr [[ARRAYIDX_I_I_I9_I_I]], align 4, !tbaa [[TBAA99]], !noalias [[META157]]
// CHECK-NEXT:    [[INC_I_I]] = add nuw nsw i32 [[I_0_I_I]], 1
// CHECK-NEXT:    br label [[FOR_COND_I_I]], !llvm.loop [[LOOP160:![0-9]+]]
// CHECK:       _ZN4sycl3_V16detailngERKNS0_3vecIiLi4EEE.exit:
// CHECK-NEXT:    call void @llvm.memcpy.p4.p0.i64(ptr addrspace(4) align 16 [[AGG_RESULT]], ptr align 16 [[TMP_I_I]], i64 16, i1 false)
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr nonnull [[TMP_I_I]]), !noalias [[META154]]
// CHECK-NEXT:    ret void
//
SYCL_EXTERNAL auto TestMinus(vec<int, 4> a) { return -a; }

// Negation is not valid for std::byte. Therefore, using bitwise negation.
// CHECK-LABEL: define dso_local spir_func void @_Z19TestBitwiseNegationN4sycl3_V13vecISt4byteLi16EEE(
// CHECK-SAME: ptr addrspace(4) dead_on_unwind noalias nocapture writable writeonly sret(%"class.sycl::_V1::vec.1560") align 16 [[AGG_RESULT:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.1560") align 16 [[A:%.*]]) local_unnamed_addr #[[ATTR4]] !srcloc [[META161:![0-9]+]] !sycl_fixed_targets [[META7]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP_I_I:%.*]] = alloca %"class.sycl::_V1::vec.1560", align 16
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr nonnull [[TMP_I_I]]), !noalias [[META162:![0-9]+]]
// CHECK-NEXT:    br label [[FOR_COND_I_I:%.*]]
// CHECK:       for.cond.i.i:
// CHECK-NEXT:    [[I_0_I_I:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[INC_I_I:%.*]], [[FOR_BODY_I_I:%.*]] ]
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp ult i32 [[I_0_I_I]], 16
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[FOR_BODY_I_I]], label [[_ZN4SYCL3_V16DETAILCOERKNS0_3VECIST4BYTELI16EEE_EXIT:%.*]]
// CHECK:       for.body.i.i:
// CHECK-NEXT:    [[CONV_I_I_I:%.*]] = zext nneg i32 [[I_0_I_I]] to i64
// CHECK-NEXT:    [[ARRAYIDX_I_I_I_I_I:%.*]] = getelementptr inbounds [16 x i8], ptr [[A]], i64 0, i64 [[CONV_I_I_I]]
// CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr [[ARRAYIDX_I_I_I_I_I]], align 1, !tbaa [[TBAA15]], !noalias [[META165:![0-9]+]]
// CHECK-NEXT:    [[NOT_I_I_I_I:%.*]] = xor i8 [[TMP0]], -1
// CHECK-NEXT:    [[ARRAYIDX_I_I_I9_I_I:%.*]] = getelementptr inbounds [16 x i8], ptr [[TMP_I_I]], i64 0, i64 [[CONV_I_I_I]]
// CHECK-NEXT:    store i8 [[NOT_I_I_I_I]], ptr [[ARRAYIDX_I_I_I9_I_I]], align 1, !tbaa [[TBAA15]], !noalias [[META165]]
// CHECK-NEXT:    [[INC_I_I]] = add nuw nsw i32 [[I_0_I_I]], 1
// CHECK-NEXT:    br label [[FOR_COND_I_I]], !llvm.loop [[LOOP168:![0-9]+]]
// CHECK:       _ZN4sycl3_V16detailcoERKNS0_3vecISt4byteLi16EEE.exit:
// CHECK-NEXT:    call void @llvm.memcpy.p4.p0.i64(ptr addrspace(4) align 16 [[AGG_RESULT]], ptr align 16 [[TMP_I_I]], i64 16, i1 false)
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr nonnull [[TMP_I_I]]), !noalias [[META162]]
// CHECK-NEXT:    ret void
//
SYCL_EXTERNAL auto TestBitwiseNegation(vec<std::byte, 16> a) { return ~a; }

// CHECK-LABEL: define dso_local spir_func void @_Z12TestNegationN4sycl3_V13vecIbLi4EEE(
// CHECK-SAME: ptr addrspace(4) dead_on_unwind noalias nocapture writable writeonly sret(%"class.sycl::_V1::vec.1652") align 4 [[AGG_RESULT:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.359") align 4 [[A:%.*]]) local_unnamed_addr #[[ATTR1]] !srcloc [[META169:![0-9]+]] !sycl_fixed_targets [[META7]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP_I_I:%.*]] = alloca %"class.sycl::_V1::vec.1652", align 4
// CHECK-NEXT:    tail call void @llvm.experimental.noalias.scope.decl(metadata [[META170:![0-9]+]])
// CHECK-NEXT:    tail call void @llvm.experimental.noalias.scope.decl(metadata [[META173:![0-9]+]])
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 4, ptr nonnull [[TMP_I_I]]), !noalias [[META170]]
// CHECK-NEXT:    br label [[FOR_COND_I_I:%.*]]
// CHECK:       for.cond.i.i:
// CHECK-NEXT:    [[I_0_I_I:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[INC_I_I:%.*]], [[FOR_BODY_I_I:%.*]] ]
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp ult i32 [[I_0_I_I]], 4
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[FOR_BODY_I_I]], label [[_ZN4SYCL3_V16DETAILNTERKNS0_3VECIBLI4EEE_EXIT:%.*]]
// CHECK:       for.body.i.i:
// CHECK-NEXT:    [[CONV_I_I_I:%.*]] = zext nneg i32 [[I_0_I_I]] to i64
// CHECK-NEXT:    [[ARRAYIDX_I_I_I_I_I:%.*]] = getelementptr inbounds [4 x i8], ptr [[A]], i64 0, i64 [[CONV_I_I_I]]
// CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr [[ARRAYIDX_I_I_I_I_I]], align 1, !tbaa [[TBAA50]], !range [[RNG52]], !noalias [[META176:![0-9]+]], !noundef [[META7]]
// CHECK-NEXT:    [[DOTNEG_I_I:%.*]] = add nsw i8 [[TMP0]], -1
// CHECK-NEXT:    [[ARRAYIDX_I_I_I10_I_I:%.*]] = getelementptr inbounds [4 x i8], ptr [[TMP_I_I]], i64 0, i64 [[CONV_I_I_I]]
// CHECK-NEXT:    store i8 [[DOTNEG_I_I]], ptr [[ARRAYIDX_I_I_I10_I_I]], align 1, !tbaa [[TBAA15]], !noalias [[META176]]
// CHECK-NEXT:    [[INC_I_I]] = add nuw nsw i32 [[I_0_I_I]], 1
// CHECK-NEXT:    br label [[FOR_COND_I_I]], !llvm.loop [[LOOP177:![0-9]+]]
// CHECK:       _ZN4sycl3_V16detailntERKNS0_3vecIbLi4EEE.exit:
// CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[TMP_I_I]], align 4, !noalias [[META176]]
// CHECK-NEXT:    store i32 [[TMP1]], ptr addrspace(4) [[AGG_RESULT]], align 4, !alias.scope [[META176]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 4, ptr nonnull [[TMP_I_I]]), !noalias [[META170]]
// CHECK-NEXT:    ret void
//
SYCL_EXTERNAL auto TestNegation(vec<bool, 4> a) { return !a; }

// CHECK-LABEL: define dso_local spir_func void @_Z12TestNegationN4sycl3_V13vecINS0_6detail9half_impl4halfELi2EEE(
// CHECK-SAME: ptr addrspace(4) dead_on_unwind noalias nocapture writable writeonly sret(%"class.sycl::_V1::vec.1743") align 4 [[AGG_RESULT:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.1834") align 4 [[A:%.*]]) local_unnamed_addr #[[ATTR1]] !srcloc [[META178:![0-9]+]] !sycl_used_aspects [[META56]] !sycl_fixed_targets [[META7]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP_I_I:%.*]] = alloca %"class.sycl::_V1::vec.1743", align 4
// CHECK-NEXT:    tail call void @llvm.experimental.noalias.scope.decl(metadata [[META179:![0-9]+]])
// CHECK-NEXT:    tail call void @llvm.experimental.noalias.scope.decl(metadata [[META182:![0-9]+]])
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 4, ptr nonnull [[TMP_I_I]]), !noalias [[META179]]
// CHECK-NEXT:    br label [[FOR_COND_I_I:%.*]]
// CHECK:       for.cond.i.i:
// CHECK-NEXT:    [[I_0_I_I:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[INC_I_I:%.*]], [[FOR_BODY_I_I:%.*]] ]
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp ult i32 [[I_0_I_I]], 2
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[FOR_BODY_I_I]], label [[_ZN4SYCL3_V16DETAILNTERKNS0_3VECINS1_9HALF_IMPL4HALFELI2EEE_EXIT:%.*]]
// CHECK:       for.body.i.i:
// CHECK-NEXT:    [[CONV_I_I_I:%.*]] = zext nneg i32 [[I_0_I_I]] to i64
// CHECK-NEXT:    [[ARRAYIDX_I_I_I_I_I:%.*]] = getelementptr inbounds [2 x %"class.sycl::_V1::detail::half_impl::half"], ptr [[A]], i64 0, i64 [[CONV_I_I_I]]
// CHECK-NEXT:    [[TMP0:%.*]] = load half, ptr [[ARRAYIDX_I_I_I_I_I]], align 2, !tbaa [[TBAA185:![0-9]+]], !noalias [[META187:![0-9]+]]
// CHECK-NEXT:    [[TOBOOL_I_I_I:%.*]] = fcmp oeq half [[TMP0]], 0xH0000
// CHECK-NEXT:    [[CONV4_I_I:%.*]] = sext i1 [[TOBOOL_I_I_I]] to i16
// CHECK-NEXT:    [[ARRAYIDX_I_I_I10_I_I:%.*]] = getelementptr inbounds [2 x i16], ptr [[TMP_I_I]], i64 0, i64 [[CONV_I_I_I]]
// CHECK-NEXT:    store i16 [[CONV4_I_I]], ptr [[ARRAYIDX_I_I_I10_I_I]], align 2, !tbaa [[TBAA76]], !noalias [[META187]]
// CHECK-NEXT:    [[INC_I_I]] = add nuw nsw i32 [[I_0_I_I]], 1
// CHECK-NEXT:    br label [[FOR_COND_I_I]], !llvm.loop [[LOOP188:![0-9]+]]
// CHECK:       _ZN4sycl3_V16detailntERKNS0_3vecINS1_9half_impl4halfELi2EEE.exit:
// CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[TMP_I_I]], align 4, !noalias [[META187]]
// CHECK-NEXT:    store i32 [[TMP1]], ptr addrspace(4) [[AGG_RESULT]], align 4, !alias.scope [[META187]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 4, ptr nonnull [[TMP_I_I]]), !noalias [[META179]]
// CHECK-NEXT:    ret void
//
SYCL_EXTERNAL auto TestNegation(vec<half, 2> a) { return !a; }

// CHECK-LABEL: define dso_local spir_func void @_Z9TestMinusN4sycl3_V13vecINS0_6detail9half_impl4halfELi8EEE(
// CHECK-SAME: ptr addrspace(4) dead_on_unwind noalias nocapture writable writeonly sret(%"class.sycl::_V1::vec.1100") align 16 [[AGG_RESULT:%.*]], ptr nocapture noundef readonly byval(%"class.sycl::_V1::vec.1100") align 16 [[A:%.*]]) local_unnamed_addr #[[ATTR4]] !srcloc [[META189:![0-9]+]] !sycl_used_aspects [[META56]] !sycl_fixed_targets [[META7]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP_I_I:%.*]] = alloca %"class.sycl::_V1::vec.1100", align 16
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr nonnull [[TMP_I_I]]), !noalias [[META190:![0-9]+]]
// CHECK-NEXT:    br label [[FOR_COND_I_I:%.*]]
// CHECK:       for.cond.i.i:
// CHECK-NEXT:    [[I_0_I_I:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[INC_I_I:%.*]], [[FOR_BODY_I_I:%.*]] ]
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp ult i32 [[I_0_I_I]], 8
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[FOR_BODY_I_I]], label [[_ZN4SYCL3_V16DETAILNGERKNS0_3VECINS1_9HALF_IMPL4HALFELI8EEE_EXIT:%.*]]
// CHECK:       for.body.i.i:
// CHECK-NEXT:    [[CONV_I_I_I:%.*]] = zext nneg i32 [[I_0_I_I]] to i64
// CHECK-NEXT:    [[ARRAYIDX_I_I_I_I_I:%.*]] = getelementptr inbounds [8 x %"class.sycl::_V1::detail::half_impl::half"], ptr [[A]], i64 0, i64 [[CONV_I_I_I]]
// CHECK-NEXT:    [[TMP0:%.*]] = load half, ptr [[ARRAYIDX_I_I_I_I_I]], align 2, !tbaa [[TBAA119]], !noalias [[META193:![0-9]+]]
// CHECK-NEXT:    [[FNEG_I_I_I_I:%.*]] = fneg half [[TMP0]]
// CHECK-NEXT:    [[ARRAYIDX_I_I_I8_I_I:%.*]] = getelementptr inbounds [8 x %"class.sycl::_V1::detail::half_impl::half"], ptr [[TMP_I_I]], i64 0, i64 [[CONV_I_I_I]]
// CHECK-NEXT:    store half [[FNEG_I_I_I_I]], ptr [[ARRAYIDX_I_I_I8_I_I]], align 2, !tbaa [[TBAA119]], !noalias [[META198:![0-9]+]]
// CHECK-NEXT:    [[INC_I_I]] = add nuw nsw i32 [[I_0_I_I]], 1
// CHECK-NEXT:    br label [[FOR_COND_I_I]], !llvm.loop [[LOOP199:![0-9]+]]
// CHECK:       _ZN4sycl3_V16detailngERKNS0_3vecINS1_9half_impl4halfELi8EEE.exit:
// CHECK-NEXT:    call void @llvm.memcpy.p4.p0.i64(ptr addrspace(4) align 16 [[AGG_RESULT]], ptr align 16 [[TMP_I_I]], i64 16, i1 false)
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr nonnull [[TMP_I_I]]), !noalias [[META190]]
// CHECK-NEXT:    ret void
//
SYCL_EXTERNAL auto TestMinus(vec<half, 8> a) { return -a; }

// CHECK-LABEL: define dso_local spir_func void @_Z12TestNegationN4sycl3_V13vecINS0_3ext6oneapi8bfloat16ELi3EEE(
// CHECK-SAME: ptr addrspace(4) dead_on_unwind noalias nocapture writable writeonly sret(%"class.sycl::_V1::vec.1925") align 8 [[AGG_RESULT:%.*]], ptr noundef byval(%"class.sycl::_V1::vec.544") align 8 [[A:%.*]]) local_unnamed_addr #[[ATTR2]] !srcloc [[META200:![0-9]+]] !sycl_fixed_targets [[META7]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP_I_I:%.*]] = alloca %"class.sycl::_V1::vec.1925", align 8
// CHECK-NEXT:    [[A_ASCAST:%.*]] = addrspacecast ptr [[A]] to ptr addrspace(4)
// CHECK-NEXT:    tail call void @llvm.experimental.noalias.scope.decl(metadata [[META201:![0-9]+]])
// CHECK-NEXT:    tail call void @llvm.experimental.noalias.scope.decl(metadata [[META204:![0-9]+]])
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr nonnull [[TMP_I_I]]), !noalias [[META201]]
// CHECK-NEXT:    br label [[FOR_COND_I_I:%.*]]
// CHECK:       for.cond.i.i:
// CHECK-NEXT:    [[I_0_I_I:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[INC_I_I:%.*]], [[FOR_BODY_I_I:%.*]] ]
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp ult i32 [[I_0_I_I]], 3
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[FOR_BODY_I_I]], label [[_ZN4SYCL3_V16DETAILNTERKNS0_3VECINS0_3EXT6ONEAPI8BFLOAT16ELI3EEE_EXIT:%.*]]
// CHECK:       for.body.i.i:
// CHECK-NEXT:    [[CONV_I_I_I:%.*]] = zext nneg i32 [[I_0_I_I]] to i64
// CHECK-NEXT:    [[ARRAYIDX_I_I_I_I_I:%.*]] = getelementptr inbounds [4 x %"class.sycl::_V1::ext::oneapi::bfloat16"], ptr addrspace(4) [[A_ASCAST]], i64 0, i64 [[CONV_I_I_I]]
// CHECK-NEXT:    [[CALL_I_I_I_I_I:%.*]] = call spir_func noundef float @__devicelib_ConvertBF16ToFINTEL(ptr addrspace(4) noundef align 2 dereferenceable(2) [[ARRAYIDX_I_I_I_I_I]]) #[[ATTR10]], !noalias [[META207:![0-9]+]]
// CHECK-NEXT:    [[TOBOOL_I_I_I:%.*]] = fcmp oeq float [[CALL_I_I_I_I_I]], 0.000000e+00
// CHECK-NEXT:    [[CONV4_I_I:%.*]] = sext i1 [[TOBOOL_I_I_I]] to i16
// CHECK-NEXT:    [[ARRAYIDX_I_I_I10_I_I:%.*]] = getelementptr inbounds [4 x i16], ptr [[TMP_I_I]], i64 0, i64 [[CONV_I_I_I]]
// CHECK-NEXT:    store i16 [[CONV4_I_I]], ptr [[ARRAYIDX_I_I_I10_I_I]], align 2, !tbaa [[TBAA76]], !noalias [[META207]]
// CHECK-NEXT:    [[INC_I_I]] = add nuw nsw i32 [[I_0_I_I]], 1
// CHECK-NEXT:    br label [[FOR_COND_I_I]], !llvm.loop [[LOOP208:![0-9]+]]
// CHECK:       _ZN4sycl3_V16detailntERKNS0_3vecINS0_3ext6oneapi8bfloat16ELi3EEE.exit:
// CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[TMP_I_I]], align 8, !noalias [[META207]]
// CHECK-NEXT:    store i64 [[TMP0]], ptr addrspace(4) [[AGG_RESULT]], align 8, !alias.scope [[META207]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr nonnull [[TMP_I_I]]), !noalias [[META201]]
// CHECK-NEXT:    ret void
//
SYCL_EXTERNAL auto TestNegation(vec<ext::oneapi::bfloat16, 3> a) { return !a; }

// CHECK-LABEL: define dso_local spir_func void @_Z9TestMinusN4sycl3_V13vecINS0_3ext6oneapi8bfloat16ELi16EEE(
// CHECK-SAME: ptr addrspace(4) dead_on_unwind noalias nocapture writable writeonly sret(%"class.sycl::_V1::vec.2015") align 32 [[AGG_RESULT:%.*]], ptr noundef byval(%"class.sycl::_V1::vec.2015") align 32 [[A:%.*]]) local_unnamed_addr #[[ATTR2]] !srcloc [[META209:![0-9]+]] !sycl_fixed_targets [[META7]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP_I_I:%.*]] = alloca %"class.sycl::_V1::vec.2015", align 32
// CHECK-NEXT:    [[REF_TMP_I_I:%.*]] = alloca float, align 4
// CHECK-NEXT:    [[A_ASCAST:%.*]] = addrspacecast ptr [[A]] to ptr addrspace(4)
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 32, ptr nonnull [[TMP_I_I]]), !noalias [[META210:![0-9]+]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 4, ptr nonnull [[REF_TMP_I_I]]), !noalias [[META210]]
// CHECK-NEXT:    [[REF_TMP_ASCAST_I_I:%.*]] = addrspacecast ptr [[REF_TMP_I_I]] to ptr addrspace(4)
// CHECK-NEXT:    br label [[FOR_COND_I_I:%.*]]
// CHECK:       for.cond.i.i:
// CHECK-NEXT:    [[I_0_I_I:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[INC_I_I:%.*]], [[FOR_BODY_I_I:%.*]] ]
// CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp ult i32 [[I_0_I_I]], 16
// CHECK-NEXT:    br i1 [[CMP_I_I]], label [[FOR_BODY_I_I]], label [[_ZN4SYCL3_V16DETAILNGERKNS0_3VECINS0_3EXT6ONEAPI8BFLOAT16ELI16EEE_EXIT:%.*]]
// CHECK:       for.body.i.i:
// CHECK-NEXT:    [[CONV_I_I_I:%.*]] = zext nneg i32 [[I_0_I_I]] to i64
// CHECK-NEXT:    [[ARRAYIDX_I_I_I_I_I:%.*]] = getelementptr inbounds [16 x %"class.sycl::_V1::ext::oneapi::bfloat16"], ptr addrspace(4) [[A_ASCAST]], i64 0, i64 [[CONV_I_I_I]]
// CHECK-NEXT:    [[CALL_I_I_I_I_I:%.*]] = call spir_func noundef float @__devicelib_ConvertBF16ToFINTEL(ptr addrspace(4) noundef align 2 dereferenceable(2) [[ARRAYIDX_I_I_I_I_I]]) #[[ATTR10]], !noalias [[META213:![0-9]+]]
// CHECK-NEXT:    [[FNEG_I_I_I:%.*]] = fneg float [[CALL_I_I_I_I_I]]
// CHECK-NEXT:    store float [[FNEG_I_I_I]], ptr [[REF_TMP_I_I]], align 4, !tbaa [[TBAA89]], !noalias [[META213]]
// CHECK-NEXT:    [[ARRAYIDX_I_I_I10_I_I:%.*]] = getelementptr inbounds [16 x %"class.sycl::_V1::ext::oneapi::bfloat16"], ptr [[TMP_I_I]], i64 0, i64 [[CONV_I_I_I]]
// CHECK-NEXT:    [[CALL_I_I_I_I:%.*]] = call spir_func noundef zeroext i16 @__devicelib_ConvertFToBF16INTEL(ptr addrspace(4) noundef align 4 dereferenceable(4) [[REF_TMP_ASCAST_I_I]]) #[[ATTR10]], !noalias [[META213]]
// CHECK-NEXT:    store i16 [[CALL_I_I_I_I]], ptr [[ARRAYIDX_I_I_I10_I_I]], align 2, !tbaa [[TBAA216:![0-9]+]], !noalias [[META213]]
// CHECK-NEXT:    [[INC_I_I]] = add nuw nsw i32 [[I_0_I_I]], 1
// CHECK-NEXT:    br label [[FOR_COND_I_I]], !llvm.loop [[LOOP218:![0-9]+]]
// CHECK:       _ZN4sycl3_V16detailngERKNS0_3vecINS0_3ext6oneapi8bfloat16ELi16EEE.exit:
// CHECK-NEXT:    call void @llvm.memcpy.p4.p0.i64(ptr addrspace(4) align 32 [[AGG_RESULT]], ptr align 32 [[TMP_I_I]], i64 32, i1 false)
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 32, ptr nonnull [[TMP_I_I]]), !noalias [[META210]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 4, ptr nonnull [[REF_TMP_I_I]]), !noalias [[META210]]
// CHECK-NEXT:    ret void
//
SYCL_EXTERNAL auto TestMinus(vec<ext::oneapi::bfloat16, 16> a) { return -a; }
